// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using xproAPI.Models;

#nullable disable

namespace xproAPI.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20241111212245_Add Absences table")]
    partial class AddAbsencestable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("xproAPI.Models.Absence", b =>
                {
                    b.Property<long>("AbsenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("AbsenceId"));

                    b.Property<string>("AbsenceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AbsenceId");

                    b.ToTable("Absences");
                });

            modelBuilder.Entity("xproAPI.Models.BreakDuration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<bool>("Valid")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("BreakDurations");
                });

            modelBuilder.Entity("xproAPI.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmploymentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OtherEmploymentType")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("xproAPI.Models.WorkTime", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Absent")
                        .HasColumnType("boolean");

                    b.Property<long?>("AbsentType")
                        .HasColumnType("bigint");

                    b.Property<TimeOnly?>("BreakDuration")
                        .HasColumnType("time without time zone");

                    b.Property<long>("BreakDurationId")
                        .HasColumnType("bigint");

                    b.Property<TimeOnly?>("BreakEnd")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly?>("BreakOverAllowedTime")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly?>("BreakStart")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("ClockIn")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly?>("ClockOut")
                        .HasColumnType("time without time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text");

                    b.Property<string>("TotalWorkTime")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BreakDurationId");

                    b.HasIndex("UserId");

                    b.ToTable("WorkTimes");
                });

            modelBuilder.Entity("xproAPI.Models.WorkTime", b =>
                {
                    b.HasOne("xproAPI.Models.BreakDuration", null)
                        .WithMany("WorkTimes")
                        .HasForeignKey("BreakDurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xproAPI.Models.User", null)
                        .WithMany("WorkTimes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("xproAPI.Models.BreakDuration", b =>
                {
                    b.Navigation("WorkTimes");
                });

            modelBuilder.Entity("xproAPI.Models.User", b =>
                {
                    b.Navigation("WorkTimes");
                });
#pragma warning restore 612, 618
        }
    }
}
